// source: pointcloud.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol('proto.IVM.slam.ChunkRequest', null, global);
goog.exportSymbol('proto.IVM.slam.DataChunk', null, global);
goog.exportSymbol('proto.IVM.slam.Index', null, global);
goog.exportSymbol('proto.IVM.slam.Point', null, global);
goog.exportSymbol('proto.IVM.slam.PointCloud', null, global);
goog.exportSymbol('proto.IVM.slam.PointCloudList', null, global);
goog.exportSymbol('proto.IVM.slam.PointCloudWithPose', null, global);
goog.exportSymbol('proto.IVM.slam.Pose', null, global);
goog.exportSymbol('proto.IVM.slam.PoseList', null, global);
goog.exportSymbol('proto.IVM.slam.SessionInfo', null, global);
goog.exportSymbol('proto.IVM.slam.SlamData', null, global);
goog.exportSymbol('proto.IVM.slam.SyncStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.DataChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IVM.slam.DataChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.DataChunk.displayName = 'proto.IVM.slam.DataChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.ChunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IVM.slam.ChunkRequest.repeatedFields_, null);
};
goog.inherits(proto.IVM.slam.ChunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.ChunkRequest.displayName = 'proto.IVM.slam.ChunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.SyncStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IVM.slam.SyncStatus.repeatedFields_, null);
};
goog.inherits(proto.IVM.slam.SyncStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.SyncStatus.displayName = 'proto.IVM.slam.SyncStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.SlamData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IVM.slam.SlamData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.SlamData.displayName = 'proto.IVM.slam.SlamData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IVM.slam.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.Point.displayName = 'proto.IVM.slam.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.PointCloud = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IVM.slam.PointCloud.repeatedFields_, null);
};
goog.inherits(proto.IVM.slam.PointCloud, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.PointCloud.displayName = 'proto.IVM.slam.PointCloud';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.Pose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IVM.slam.Pose.repeatedFields_, null);
};
goog.inherits(proto.IVM.slam.Pose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.Pose.displayName = 'proto.IVM.slam.Pose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IVM.slam.Index.repeatedFields_, null);
};
goog.inherits(proto.IVM.slam.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.Index.displayName = 'proto.IVM.slam.Index';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.PointCloudList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IVM.slam.PointCloudList.repeatedFields_, null);
};
goog.inherits(proto.IVM.slam.PointCloudList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.PointCloudList.displayName = 'proto.IVM.slam.PointCloudList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.PoseList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IVM.slam.PoseList.repeatedFields_, null);
};
goog.inherits(proto.IVM.slam.PoseList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.PoseList.displayName = 'proto.IVM.slam.PoseList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.PointCloudWithPose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IVM.slam.PointCloudWithPose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.PointCloudWithPose.displayName = 'proto.IVM.slam.PointCloudWithPose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IVM.slam.SessionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IVM.slam.SessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IVM.slam.SessionInfo.displayName = 'proto.IVM.slam.SessionInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.DataChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.DataChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.DataChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.DataChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
chunkId: jspb.Message.getFieldWithDefault(msg, 1, ""),
sequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
sessionId: jspb.Message.getFieldWithDefault(msg, 3, ""),
timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
pointcloud: (f = msg.getPointcloud()) && proto.IVM.slam.PointCloud.toObject(includeInstance, f),
pose: (f = msg.getPose()) && proto.IVM.slam.Pose.toObject(includeInstance, f),
isKeyframe: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.DataChunk}
 */
proto.IVM.slam.DataChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.DataChunk;
  return proto.IVM.slam.DataChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.DataChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.DataChunk}
 */
proto.IVM.slam.DataChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChunkId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = new proto.IVM.slam.PointCloud;
      reader.readMessage(value,proto.IVM.slam.PointCloud.deserializeBinaryFromReader);
      msg.setPointcloud(value);
      break;
    case 6:
      var value = new proto.IVM.slam.Pose;
      reader.readMessage(value,proto.IVM.slam.Pose.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsKeyframe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.DataChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.DataChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.DataChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.DataChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunkId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPointcloud();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.IVM.slam.PointCloud.serializeBinaryToWriter
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.IVM.slam.Pose.serializeBinaryToWriter
    );
  }
  f = message.getIsKeyframe();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string chunk_id = 1;
 * @return {string}
 */
proto.IVM.slam.DataChunk.prototype.getChunkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IVM.slam.DataChunk} returns this
 */
proto.IVM.slam.DataChunk.prototype.setChunkId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 sequence_number = 2;
 * @return {number}
 */
proto.IVM.slam.DataChunk.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.DataChunk} returns this
 */
proto.IVM.slam.DataChunk.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string session_id = 3;
 * @return {string}
 */
proto.IVM.slam.DataChunk.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IVM.slam.DataChunk} returns this
 */
proto.IVM.slam.DataChunk.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.IVM.slam.DataChunk.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.DataChunk} returns this
 */
proto.IVM.slam.DataChunk.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional PointCloud pointcloud = 5;
 * @return {?proto.IVM.slam.PointCloud}
 */
proto.IVM.slam.DataChunk.prototype.getPointcloud = function() {
  return /** @type{?proto.IVM.slam.PointCloud} */ (
    jspb.Message.getWrapperField(this, proto.IVM.slam.PointCloud, 5));
};


/**
 * @param {?proto.IVM.slam.PointCloud|undefined} value
 * @return {!proto.IVM.slam.DataChunk} returns this
*/
proto.IVM.slam.DataChunk.prototype.setPointcloud = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IVM.slam.DataChunk} returns this
 */
proto.IVM.slam.DataChunk.prototype.clearPointcloud = function() {
  return this.setPointcloud(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IVM.slam.DataChunk.prototype.hasPointcloud = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Pose pose = 6;
 * @return {?proto.IVM.slam.Pose}
 */
proto.IVM.slam.DataChunk.prototype.getPose = function() {
  return /** @type{?proto.IVM.slam.Pose} */ (
    jspb.Message.getWrapperField(this, proto.IVM.slam.Pose, 6));
};


/**
 * @param {?proto.IVM.slam.Pose|undefined} value
 * @return {!proto.IVM.slam.DataChunk} returns this
*/
proto.IVM.slam.DataChunk.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IVM.slam.DataChunk} returns this
 */
proto.IVM.slam.DataChunk.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IVM.slam.DataChunk.prototype.hasPose = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool is_keyframe = 7;
 * @return {boolean}
 */
proto.IVM.slam.DataChunk.prototype.getIsKeyframe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.IVM.slam.DataChunk} returns this
 */
proto.IVM.slam.DataChunk.prototype.setIsKeyframe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IVM.slam.ChunkRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.ChunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.ChunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.ChunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.ChunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
missingChunkIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
lastSequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.ChunkRequest}
 */
proto.IVM.slam.ChunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.ChunkRequest;
  return proto.IVM.slam.ChunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.ChunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.ChunkRequest}
 */
proto.IVM.slam.ChunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMissingChunkIds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.ChunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.ChunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.ChunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.ChunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMissingChunkIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getLastSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.IVM.slam.ChunkRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IVM.slam.ChunkRequest} returns this
 */
proto.IVM.slam.ChunkRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string missing_chunk_ids = 2;
 * @return {!Array<string>}
 */
proto.IVM.slam.ChunkRequest.prototype.getMissingChunkIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.IVM.slam.ChunkRequest} returns this
 */
proto.IVM.slam.ChunkRequest.prototype.setMissingChunkIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.IVM.slam.ChunkRequest} returns this
 */
proto.IVM.slam.ChunkRequest.prototype.addMissingChunkIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IVM.slam.ChunkRequest} returns this
 */
proto.IVM.slam.ChunkRequest.prototype.clearMissingChunkIdsList = function() {
  return this.setMissingChunkIdsList([]);
};


/**
 * optional int32 last_sequence_number = 3;
 * @return {number}
 */
proto.IVM.slam.ChunkRequest.prototype.getLastSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.ChunkRequest} returns this
 */
proto.IVM.slam.ChunkRequest.prototype.setLastSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IVM.slam.SyncStatus.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.SyncStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.SyncStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.SyncStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.SyncStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
totalChunks: jspb.Message.getFieldWithDefault(msg, 2, 0),
latestSequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
availableChunkIdsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.SyncStatus}
 */
proto.IVM.slam.SyncStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.SyncStatus;
  return proto.IVM.slam.SyncStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.SyncStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.SyncStatus}
 */
proto.IVM.slam.SyncStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalChunks(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLatestSequenceNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAvailableChunkIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.SyncStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.SyncStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.SyncStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.SyncStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalChunks();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLatestSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAvailableChunkIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.IVM.slam.SyncStatus.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IVM.slam.SyncStatus} returns this
 */
proto.IVM.slam.SyncStatus.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 total_chunks = 2;
 * @return {number}
 */
proto.IVM.slam.SyncStatus.prototype.getTotalChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.SyncStatus} returns this
 */
proto.IVM.slam.SyncStatus.prototype.setTotalChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 latest_sequence_number = 3;
 * @return {number}
 */
proto.IVM.slam.SyncStatus.prototype.getLatestSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.SyncStatus} returns this
 */
proto.IVM.slam.SyncStatus.prototype.setLatestSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated string available_chunk_ids = 4;
 * @return {!Array<string>}
 */
proto.IVM.slam.SyncStatus.prototype.getAvailableChunkIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.IVM.slam.SyncStatus} returns this
 */
proto.IVM.slam.SyncStatus.prototype.setAvailableChunkIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.IVM.slam.SyncStatus} returns this
 */
proto.IVM.slam.SyncStatus.prototype.addAvailableChunkIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IVM.slam.SyncStatus} returns this
 */
proto.IVM.slam.SyncStatus.prototype.clearAvailableChunkIdsList = function() {
  return this.setAvailableChunkIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.SlamData.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.SlamData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.SlamData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.SlamData.toObject = function(includeInstance, msg) {
  var f, obj = {
pointcloudlist: (f = msg.getPointcloudlist()) && proto.IVM.slam.PointCloudList.toObject(includeInstance, f),
poselist: (f = msg.getPoselist()) && proto.IVM.slam.PoseList.toObject(includeInstance, f),
indexlist: (f = msg.getIndexlist()) && proto.IVM.slam.Index.toObject(includeInstance, f),
chunkId: jspb.Message.getFieldWithDefault(msg, 4, ""),
sequenceNumber: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.SlamData}
 */
proto.IVM.slam.SlamData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.SlamData;
  return proto.IVM.slam.SlamData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.SlamData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.SlamData}
 */
proto.IVM.slam.SlamData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IVM.slam.PointCloudList;
      reader.readMessage(value,proto.IVM.slam.PointCloudList.deserializeBinaryFromReader);
      msg.setPointcloudlist(value);
      break;
    case 2:
      var value = new proto.IVM.slam.PoseList;
      reader.readMessage(value,proto.IVM.slam.PoseList.deserializeBinaryFromReader);
      msg.setPoselist(value);
      break;
    case 3:
      var value = new proto.IVM.slam.Index;
      reader.readMessage(value,proto.IVM.slam.Index.deserializeBinaryFromReader);
      msg.setIndexlist(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChunkId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.SlamData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.SlamData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.SlamData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.SlamData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointcloudlist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IVM.slam.PointCloudList.serializeBinaryToWriter
    );
  }
  f = message.getPoselist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IVM.slam.PoseList.serializeBinaryToWriter
    );
  }
  f = message.getIndexlist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.IVM.slam.Index.serializeBinaryToWriter
    );
  }
  f = message.getChunkId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional PointCloudList pointcloudlist = 1;
 * @return {?proto.IVM.slam.PointCloudList}
 */
proto.IVM.slam.SlamData.prototype.getPointcloudlist = function() {
  return /** @type{?proto.IVM.slam.PointCloudList} */ (
    jspb.Message.getWrapperField(this, proto.IVM.slam.PointCloudList, 1));
};


/**
 * @param {?proto.IVM.slam.PointCloudList|undefined} value
 * @return {!proto.IVM.slam.SlamData} returns this
*/
proto.IVM.slam.SlamData.prototype.setPointcloudlist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IVM.slam.SlamData} returns this
 */
proto.IVM.slam.SlamData.prototype.clearPointcloudlist = function() {
  return this.setPointcloudlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IVM.slam.SlamData.prototype.hasPointcloudlist = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PoseList poselist = 2;
 * @return {?proto.IVM.slam.PoseList}
 */
proto.IVM.slam.SlamData.prototype.getPoselist = function() {
  return /** @type{?proto.IVM.slam.PoseList} */ (
    jspb.Message.getWrapperField(this, proto.IVM.slam.PoseList, 2));
};


/**
 * @param {?proto.IVM.slam.PoseList|undefined} value
 * @return {!proto.IVM.slam.SlamData} returns this
*/
proto.IVM.slam.SlamData.prototype.setPoselist = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IVM.slam.SlamData} returns this
 */
proto.IVM.slam.SlamData.prototype.clearPoselist = function() {
  return this.setPoselist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IVM.slam.SlamData.prototype.hasPoselist = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Index indexlist = 3;
 * @return {?proto.IVM.slam.Index}
 */
proto.IVM.slam.SlamData.prototype.getIndexlist = function() {
  return /** @type{?proto.IVM.slam.Index} */ (
    jspb.Message.getWrapperField(this, proto.IVM.slam.Index, 3));
};


/**
 * @param {?proto.IVM.slam.Index|undefined} value
 * @return {!proto.IVM.slam.SlamData} returns this
*/
proto.IVM.slam.SlamData.prototype.setIndexlist = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IVM.slam.SlamData} returns this
 */
proto.IVM.slam.SlamData.prototype.clearIndexlist = function() {
  return this.setIndexlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IVM.slam.SlamData.prototype.hasIndexlist = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string chunk_id = 4;
 * @return {string}
 */
proto.IVM.slam.SlamData.prototype.getChunkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IVM.slam.SlamData} returns this
 */
proto.IVM.slam.SlamData.prototype.setChunkId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 sequence_number = 5;
 * @return {number}
 */
proto.IVM.slam.SlamData.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.SlamData} returns this
 */
proto.IVM.slam.SlamData.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
r: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
g: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
b: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.Point}
 */
proto.IVM.slam.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.Point;
  return proto.IVM.slam.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.Point}
 */
proto.IVM.slam.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setR(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setG(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getR();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getG();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getB();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.IVM.slam.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.Point} returns this
 */
proto.IVM.slam.Point.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.IVM.slam.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.Point} returns this
 */
proto.IVM.slam.Point.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.IVM.slam.Point.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.Point} returns this
 */
proto.IVM.slam.Point.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double r = 4;
 * @return {number}
 */
proto.IVM.slam.Point.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.Point} returns this
 */
proto.IVM.slam.Point.prototype.setR = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double g = 5;
 * @return {number}
 */
proto.IVM.slam.Point.prototype.getG = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.Point} returns this
 */
proto.IVM.slam.Point.prototype.setG = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double b = 6;
 * @return {number}
 */
proto.IVM.slam.Point.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.Point} returns this
 */
proto.IVM.slam.Point.prototype.setB = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IVM.slam.PointCloud.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.PointCloud.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.PointCloud.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.PointCloud} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.PointCloud.toObject = function(includeInstance, msg) {
  var f, obj = {
pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.IVM.slam.Point.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.PointCloud}
 */
proto.IVM.slam.PointCloud.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.PointCloud;
  return proto.IVM.slam.PointCloud.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.PointCloud} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.PointCloud}
 */
proto.IVM.slam.PointCloud.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IVM.slam.Point;
      reader.readMessage(value,proto.IVM.slam.Point.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.PointCloud.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.PointCloud.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.PointCloud} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.PointCloud.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IVM.slam.Point.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Point points = 1;
 * @return {!Array<!proto.IVM.slam.Point>}
 */
proto.IVM.slam.PointCloud.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.IVM.slam.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IVM.slam.Point, 1));
};


/**
 * @param {!Array<!proto.IVM.slam.Point>} value
 * @return {!proto.IVM.slam.PointCloud} returns this
*/
proto.IVM.slam.PointCloud.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IVM.slam.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IVM.slam.Point}
 */
proto.IVM.slam.PointCloud.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IVM.slam.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IVM.slam.PointCloud} returns this
 */
proto.IVM.slam.PointCloud.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IVM.slam.Pose.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.Pose.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.Pose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.Pose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.Pose.toObject = function(includeInstance, msg) {
  var f, obj = {
matrixList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.Pose}
 */
proto.IVM.slam.Pose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.Pose;
  return proto.IVM.slam.Pose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.Pose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.Pose}
 */
proto.IVM.slam.Pose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMatrix(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.Pose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.Pose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.Pose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.Pose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatrixList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double matrix = 1;
 * @return {!Array<number>}
 */
proto.IVM.slam.Pose.prototype.getMatrixList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IVM.slam.Pose} returns this
 */
proto.IVM.slam.Pose.prototype.setMatrixList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IVM.slam.Pose} returns this
 */
proto.IVM.slam.Pose.prototype.addMatrix = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IVM.slam.Pose} returns this
 */
proto.IVM.slam.Pose.prototype.clearMatrixList = function() {
  return this.setMatrixList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IVM.slam.Index.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
indexList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.Index}
 */
proto.IVM.slam.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.Index;
  return proto.IVM.slam.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.Index}
 */
proto.IVM.slam.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIndex(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 index = 1;
 * @return {!Array<number>}
 */
proto.IVM.slam.Index.prototype.getIndexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.IVM.slam.Index} returns this
 */
proto.IVM.slam.Index.prototype.setIndexList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.IVM.slam.Index} returns this
 */
proto.IVM.slam.Index.prototype.addIndex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IVM.slam.Index} returns this
 */
proto.IVM.slam.Index.prototype.clearIndexList = function() {
  return this.setIndexList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IVM.slam.PointCloudList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.PointCloudList.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.PointCloudList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.PointCloudList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.PointCloudList.toObject = function(includeInstance, msg) {
  var f, obj = {
pointcloudsList: jspb.Message.toObjectList(msg.getPointcloudsList(),
    proto.IVM.slam.PointCloud.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.PointCloudList}
 */
proto.IVM.slam.PointCloudList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.PointCloudList;
  return proto.IVM.slam.PointCloudList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.PointCloudList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.PointCloudList}
 */
proto.IVM.slam.PointCloudList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IVM.slam.PointCloud;
      reader.readMessage(value,proto.IVM.slam.PointCloud.deserializeBinaryFromReader);
      msg.addPointclouds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.PointCloudList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.PointCloudList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.PointCloudList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.PointCloudList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointcloudsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IVM.slam.PointCloud.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PointCloud pointclouds = 1;
 * @return {!Array<!proto.IVM.slam.PointCloud>}
 */
proto.IVM.slam.PointCloudList.prototype.getPointcloudsList = function() {
  return /** @type{!Array<!proto.IVM.slam.PointCloud>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IVM.slam.PointCloud, 1));
};


/**
 * @param {!Array<!proto.IVM.slam.PointCloud>} value
 * @return {!proto.IVM.slam.PointCloudList} returns this
*/
proto.IVM.slam.PointCloudList.prototype.setPointcloudsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IVM.slam.PointCloud=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IVM.slam.PointCloud}
 */
proto.IVM.slam.PointCloudList.prototype.addPointclouds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IVM.slam.PointCloud, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IVM.slam.PointCloudList} returns this
 */
proto.IVM.slam.PointCloudList.prototype.clearPointcloudsList = function() {
  return this.setPointcloudsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IVM.slam.PoseList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.PoseList.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.PoseList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.PoseList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.PoseList.toObject = function(includeInstance, msg) {
  var f, obj = {
posesList: jspb.Message.toObjectList(msg.getPosesList(),
    proto.IVM.slam.Pose.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.PoseList}
 */
proto.IVM.slam.PoseList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.PoseList;
  return proto.IVM.slam.PoseList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.PoseList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.PoseList}
 */
proto.IVM.slam.PoseList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IVM.slam.Pose;
      reader.readMessage(value,proto.IVM.slam.Pose.deserializeBinaryFromReader);
      msg.addPoses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.PoseList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.PoseList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.PoseList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.PoseList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IVM.slam.Pose.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Pose poses = 1;
 * @return {!Array<!proto.IVM.slam.Pose>}
 */
proto.IVM.slam.PoseList.prototype.getPosesList = function() {
  return /** @type{!Array<!proto.IVM.slam.Pose>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IVM.slam.Pose, 1));
};


/**
 * @param {!Array<!proto.IVM.slam.Pose>} value
 * @return {!proto.IVM.slam.PoseList} returns this
*/
proto.IVM.slam.PoseList.prototype.setPosesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IVM.slam.Pose=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IVM.slam.Pose}
 */
proto.IVM.slam.PoseList.prototype.addPoses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IVM.slam.Pose, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IVM.slam.PoseList} returns this
 */
proto.IVM.slam.PoseList.prototype.clearPosesList = function() {
  return this.setPosesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.PointCloudWithPose.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.PointCloudWithPose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.PointCloudWithPose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.PointCloudWithPose.toObject = function(includeInstance, msg) {
  var f, obj = {
pointcloud: (f = msg.getPointcloud()) && proto.IVM.slam.PointCloud.toObject(includeInstance, f),
pose: (f = msg.getPose()) && proto.IVM.slam.Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.PointCloudWithPose}
 */
proto.IVM.slam.PointCloudWithPose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.PointCloudWithPose;
  return proto.IVM.slam.PointCloudWithPose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.PointCloudWithPose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.PointCloudWithPose}
 */
proto.IVM.slam.PointCloudWithPose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IVM.slam.PointCloud;
      reader.readMessage(value,proto.IVM.slam.PointCloud.deserializeBinaryFromReader);
      msg.setPointcloud(value);
      break;
    case 2:
      var value = new proto.IVM.slam.Pose;
      reader.readMessage(value,proto.IVM.slam.Pose.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.PointCloudWithPose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.PointCloudWithPose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.PointCloudWithPose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.PointCloudWithPose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointcloud();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IVM.slam.PointCloud.serializeBinaryToWriter
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IVM.slam.Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional PointCloud pointCloud = 1;
 * @return {?proto.IVM.slam.PointCloud}
 */
proto.IVM.slam.PointCloudWithPose.prototype.getPointcloud = function() {
  return /** @type{?proto.IVM.slam.PointCloud} */ (
    jspb.Message.getWrapperField(this, proto.IVM.slam.PointCloud, 1));
};


/**
 * @param {?proto.IVM.slam.PointCloud|undefined} value
 * @return {!proto.IVM.slam.PointCloudWithPose} returns this
*/
proto.IVM.slam.PointCloudWithPose.prototype.setPointcloud = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IVM.slam.PointCloudWithPose} returns this
 */
proto.IVM.slam.PointCloudWithPose.prototype.clearPointcloud = function() {
  return this.setPointcloud(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IVM.slam.PointCloudWithPose.prototype.hasPointcloud = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Pose pose = 2;
 * @return {?proto.IVM.slam.Pose}
 */
proto.IVM.slam.PointCloudWithPose.prototype.getPose = function() {
  return /** @type{?proto.IVM.slam.Pose} */ (
    jspb.Message.getWrapperField(this, proto.IVM.slam.Pose, 2));
};


/**
 * @param {?proto.IVM.slam.Pose|undefined} value
 * @return {!proto.IVM.slam.PointCloudWithPose} returns this
*/
proto.IVM.slam.PointCloudWithPose.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IVM.slam.PointCloudWithPose} returns this
 */
proto.IVM.slam.PointCloudWithPose.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IVM.slam.PointCloudWithPose.prototype.hasPose = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IVM.slam.SessionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IVM.slam.SessionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IVM.slam.SessionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.SessionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
startTime: jspb.Message.getFieldWithDefault(msg, 2, ""),
isActive: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
clientsConnected: jspb.Message.getFieldWithDefault(msg, 4, 0),
totalChunks: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IVM.slam.SessionInfo}
 */
proto.IVM.slam.SessionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IVM.slam.SessionInfo;
  return proto.IVM.slam.SessionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IVM.slam.SessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IVM.slam.SessionInfo}
 */
proto.IVM.slam.SessionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientsConnected(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IVM.slam.SessionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IVM.slam.SessionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IVM.slam.SessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IVM.slam.SessionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getClientsConnected();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTotalChunks();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.IVM.slam.SessionInfo.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.IVM.slam.SessionInfo} returns this
 */
proto.IVM.slam.SessionInfo.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string start_time = 2;
 * @return {string}
 */
proto.IVM.slam.SessionInfo.prototype.getStartTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.IVM.slam.SessionInfo} returns this
 */
proto.IVM.slam.SessionInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_active = 3;
 * @return {boolean}
 */
proto.IVM.slam.SessionInfo.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.IVM.slam.SessionInfo} returns this
 */
proto.IVM.slam.SessionInfo.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 clients_connected = 4;
 * @return {number}
 */
proto.IVM.slam.SessionInfo.prototype.getClientsConnected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.SessionInfo} returns this
 */
proto.IVM.slam.SessionInfo.prototype.setClientsConnected = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 total_chunks = 5;
 * @return {number}
 */
proto.IVM.slam.SessionInfo.prototype.getTotalChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.IVM.slam.SessionInfo} returns this
 */
proto.IVM.slam.SessionInfo.prototype.setTotalChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.IVM.slam);
